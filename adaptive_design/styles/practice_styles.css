/* звернемось до всіх елементів, щоб прибрати відступи, які назначить браузер 
   за замовчуванням */
* {
    padding: 0;
    margin: 0;
}

/* для основного контейнера будемо використовувати фіксовано-гумову верстку */
.container {
    /* ширина контейнера дорівнює ширині видимої частини вікна бравзера (viewport) - 100vw(viewport width) */
    width: 100vw;
    /* мінімальна ширина до якої можна стиснути контейнер, якщо вікно менше - з'являється горизонтальна прокрутка */
    min-width: 320px;
    /* максимальна ширина до якої контейнер можна розтягнути, якщо вікно більше - з боків з'являться відступи */
    max-width: 1200px;
    /* для того, щоб контейнер знаходився завжди по центру по горизонталі вказуємо значення для зовнішніх відступів */
    margin: auto;
    /* у випадку, якщо контенту буде мало, щоб сторінка повністю зайняла всю висоту вікна браузера, встановлюємо мінімальну висоту */
    min-height: 100vh;
    /* у випадку, якщо контенту буде багато, щоб з'явився вертикальна прокрутка, встановлюємо значення висоти рівної вмісту */
    height: auto;
    /* для простішого розташування елементів на сторінці, скористуємось технологією FlexBox */
    display: flex;
    /* напрямок основної осі змінюємо на вертикальний */
    flex-direction: column;
}

/* щоб краще розрізняти елементи дамо різні кольори фону */
header {
    background-color: pink;
    /* задамо розмір header по основній осі 10vh - 10% від висоти видимої частини екрану (viewport) */
    flex-basis: 10vh;
}

/* main - основний елемент сторінки є одночасно і flex-контейнером, і flex-елементом */
main {
    /* встановлює, скільки простору елемент може зайняти в межах батьківського контейнера. 
    Значення 11 означає, що цей елемент буде збільшувати свою ширину, зайнявши 11 частин доступного простору після 
    заповнення всіх фіксованих елементів. */
    flex-grow: 11;
    /* визначає, як елемент зменшується при нестачі місця. Значення "auto" зазвичай означає, що елемент буде зменшуватись 
    відповідно до його розмірів і контексту. */
    flex-shrink: auto;
    display: flex;
}

main>aside {
    background-color: cyan;
    /* задамо розмір лівої частини по основній осі у відсотках */
    flex-basis: 20%;
}

main>section {
    background-color: coral;
    flex-grow: 11;
    flex-shrink: auto;
}

main>section+aside {
    background-color: lime;
    /* задамо розмір лівої частини по основній осі у відсотках */
    flex-basis: 20%;
}

footer {
    background-color: gray;
    /* задамо розмір footer по основній осі */
    flex-basis: 5vh;
}

/* запит для екранів з шириною від 960px до 570px */
@media screen and (max-width:960px) and (min-width:570px) {

    main>section+aside {
        /* заховаємо правий елемент на всіх пристроях */
        display: none;
    }

    main>aside {
        /* задамо розмір лівої частини по основній осі у відсотках */
        flex-basis: 30%;
    }

    main>section {
        /* задамо розмір центральної частини по основній осі у відсотках */
        flex-basis: 70%;
    }
}

/* запит для екранів з максимальною шириною 570px і менше */
@media screen and (max-width:570px) {
    main {
        /* змінюємо напрям основної осі елементу, що відображає основний контент */
        flex-direction: column;
    }

    main>aside {
        /* задамо розмір видимому елементу aside по основній осі */
        flex-basis: 20vh;
    }

    main>section {
        /* задамо розмір основному контенту по основній осі */
        flex-basis: auto;
        order: -1;
    }

    main>section+aside {
        /* заховаємо правий елемент на всіх пристроях */
        display: none;
    }
}